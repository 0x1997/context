;/*
;            Copyright Oliver Kowalke 2009.
;   Distributed under the Boost Software License, Version 1.0.
;      (See accompanying file LICENSE_1_0.txt or copy at
;          http://www.boost.org/LICENSE_1_0.txt)
;*/

;/*******************************************************************
; *                                                                 *
; *  -------------------------------------------------------------  *
; *  |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  *
; *  -------------------------------------------------------------  *
; *  | 0x0 | 0x4 | 0x8 | 0xc | 0x10| 0x14| 0x18| 0x1c| 0x20| 0x24|  *
; *  -------------------------------------------------------------  *
; *  |  v1 |  v2 |  v3 |  v4 |  v5 |  v6 |  v7 |  v8 |  lr |  sp |  *
; *  -------------------------------------------------------------  *
; *  -------------------------------------------------------------  *
; *  |  10 |                                                     |  *
; *  -------------------------------------------------------------  *
; *  | 0x28|                                                     |  *
; *  -------------------------------------------------------------  *
; *  |  pc |                                                     |  *
; *  -------------------------------------------------------------  *
; *  -------------------------------------------------------------  *
; *  |  11 |  12 |  13 |                                         |  *
; *  -------------------------------------------------------------  *
; *  | 0x2c| 0x30| 0x34|                                         |  *
; *  -------------------------------------------------------------  *
; *  |  sp | size|limit|                                         |  *
; *  -------------------------------------------------------------  *
; *  -------------------------------------------------------------  *
; *  |  14 | 15 |  16 |  17 |  18 |  19 |  20 |  21 |  22  |  23 |  *
; *  -------------------------------------------------------------  *
; *  | 0x38|0x3c| 0x40| 0x44| 0x48| 0x4c| 0x50| 0x54| 0x58 | 0x5c|  *
; *  -------------------------------------------------------------  *
; *  | s16 | s17 | s18 | s19 | s20 | s21 | s22 | s23 | s24 | s25 |  *
; *  -------------------------------------------------------------  *
; *  -------------------------------------------------------------  *
; *  |  24 |  25 |  26 |  27 |  28 |  29 |                       |  *
; *  -------------------------------------------------------------  *
; *  | 0x60| 0x64| 0x68| 0x6c| 0x70| 0x74|                       |  *
; *  -------------------------------------------------------------  *
; *  | s26 | s27 | s28 | s29 | s30 | s31 |                       |  *
; *  -------------------------------------------------------------  *
; *  -------------------------------------------------------------  *
; *  |  30 |                                                     |  *
; *  -------------------------------------------------------------  *
; *  | 0x78|                                                     |  *
; *  -------------------------------------------------------------  *
; *  |deall|                                                     |  *
; *  -------------------------------------------------------------  *
; *                                                                 *
; * *****************************************************************/

    AREA |.text|, CODE
    ALIGN 4
    EXPORT jump_fcontext

jump_fcontext PROC
    stmia   a1, {r4-r11,lr}         ; save V1-V8,LR
    str     sp, [a1,#0x24]          ; save SP separately - Thumb cannot handle stmia {sp-pc}
    str     lr, [a1,#0x28]          ; save LR as PC

    cmp     a4, #0                  ; test if fpu env should be preserved
    beq     1f

    mov     a4, a1
    add     a4, #56
    vstmia  a4, {d8-d15}            ; save S16-S31

    mov     a4, a2
    add     a4, #56
    vldmia  a4, {d8-d15}            ; restore S16-S31
1:

    ; load TIB to save/restore thread size and limit.
    ; we do not need preserve CPU flag and can use it's arg register
    mrc     p15, #0, a4, c13, c0, #2

    ldr     a5, [a4,#0x04]          ; load current stack base
    str     a5, [a1,#0x2c]          ; save current stack base
    ldr     a5, [a4,#0x08]          ; load current stack limit
    str     a5, [a1,#0x34]          ; save current stack limit
    ldr     a5, [a4,#0xe0c]         ; load current deallocation stack
    str     a5, [a1,#0x78]          ; save current deallocation stack

    ldr     a5, [a2,#0x2c]          ; load stack base
    str     a5, [a4,#0x04]          ; restore stack base
    ldr     a5, [a2,#0x34]          ; load stack limit
    str     a5, [a4,#0x08]          ; restore stack limit
    ldr     a5, [a2,#0x78]          ; load deallocation stack
    str     a5, [a4,#0xe0c]         ; restore deallocation stack

    mov     a1, a3                  ; use third arg as return value after jump
                                    ; and as first arg in context function

    ldmia   a2, {r4-r11,lr}         ; restore V1-V8,LR
    ldr     sp, [a2,#0x24]
    ldr     pc, [a2,#0x28]

    ENDP
    END
